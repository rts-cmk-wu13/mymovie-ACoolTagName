you can style by using 
document.getElementById("test").style.

but insted of making a new on for each thing cant i list all the things at once
ChatGPT sagde:

Yes, you can certainly apply multiple styles at once to an element using document.getElementById("test").style, but you can't pass a whole list of styles as a single object the same way you would with CSS-in-JS libraries. However, you can apply multiple styles by setting them individually or by creating a helper function to apply them all at once.
Option 1: Set Multiple Styles Individually

If you want to avoid writing each style line separately but still use style in JavaScript, you can set the styles one by one in a more compact way using a loop:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Set Multiple Styles</title>
</head>
<body>
  <div id="test">Hello, world!</div>

  <script>
    const element = document.getElementById("test");

    // Define styles as an object
    const styles = {
      backgroundColor: "#4CAF50",
      color: "white",
      padding: "10px 20px",
      border: "none",
      borderRadius: "5px",
      cursor: "pointer",
    };

    // Loop through the object and apply each style
    for (let property in styles) {
      element.style[property] = styles[property];
    }
  </script>
</body>
</html>

How It Works:

    Define styles in an object: You create a JavaScript object (styles) where the properties are the CSS properties you want to apply, and the values are the corresponding values for those properties.
    Loop through the object: You loop through the object using for...in to access each CSS property and apply it to the element via element.style[property].

This approach allows you to keep the code more compact and manage styles in one place without needing to repeat element.style.propertyName for each individual style.
Option 2: Using Object.assign (Alternative)

Another more concise way to apply multiple styles to an element is by using Object.assign() to merge the styles directly:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Apply Multiple Styles with Object.assign</title>
</head>
<body>
  <div id="test">Hello, world!</div>

  <script>
    const element = document.getElementById("test");

    // Define styles as an object
    const styles = {
      backgroundColor: "#4CAF50",
      color: "white",
      padding: "10px 20px",
      border: "none",
      borderRadius: "5px",
      cursor: "pointer",
    };

    // Apply the styles using Object.assign
    Object.assign(element.style, styles);
  </script>
</body>
</html>

How It Works:

    Object.assign() takes the element.style object (which is a special object representing the inline styles of the element) and merges the properties from the styles object into it.
    This is a shorter, cleaner alternative to looping, and it's very effective for setting multiple styles at once.

Conclusion:

    Both of these methods allow you to define your styles in one place and apply them all at once.
    The for...in loop is a bit more manual but gives you control over the process.
    The Object.assign() method is a more modern and compact way to apply multiple styles in one go.

This way, you avoid calling element.style.property repeatedly and can apply all styles with minimal effort.